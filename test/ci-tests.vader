Before:
  call system('touch ~/test.file')
  call system('mkdir -p /tmp/temp')
  call system('mkdir -p /tmp/temp2')

After:
  let g:auto_ticket = 0
  let g:auto_ticket_save = 0
  let g:auto_ticket_open = 0
  let g:auto_ticket_git_only = 0
  let g:ticket_overwrite_confirm = 0
  let g:ticket_black_list = []
  let g:default_session_name = 'main'
  let g:session_directory = expand('~') . '/.tickets'
  let $XDG_DATA_HOME = ''
  call system('rm ~/test.file ~/.tickets/ticket.vim/*')


Execute(expect ticket#git#GetBranchName pass):
  let branchname = substitute(system(
    \ 'git symbolic-ref --short HEAD | tr -d "\n"'
    \ ), '/', '\\%', 'g')
  AssertEqual
    \ ticket#git#GetBranchName(),
    \ branchname

Execute(expect g:auto_ticket to autoset to zero):
  AssertEqual
    \ g:auto_ticket,
    \ 0

Execute(expect g:ticket_black_list to autoset to empty list):
  AssertEqual
    \ g:ticket_black_list,
    \ []

Execute(expect ticket#files#CheckFileExists fail):
  AssertThrows
    \ ticket#files#CheckFileExists('/home/nonfile')

Execute(expect ticket#files#CheckFileExists pass):
  AssertEqual
    \ ticket#files#CheckFileExists(expand('~') . '/test.file'),
    \ expand('~') . '/test.file'

Execute(expect ticket#git#CheckIfGitRepo fail):
  :cd /
  AssertEqual
    \ ticket#git#CheckIfGitRepo(),
    \ 0
Then(go back to original dir):
  :cd -

Execute(expect ticket#git#CheckIfGitRepo pass):
  AssertEqual
    \ ticket#git#CheckIfGitRepo(),
    \ 1

Execute(expect ticket#git#GetRepoName fail):
  :cd /
  AssertThrows
    \ ticket#git#GetRepoName()
Then(go back to original dir):
  :cd -

Execute(expect ticket#git#GetRepoName pass):
  AssertEqual
    \ ticket#git#GetRepoName(),
    \ 'ticket.vim'

Execute(expect GitDirPath pass):
  AssertEqual
    \ ticket#files#GetSessionDirPath(),
    \ expand('~') . '/.tickets/ticket.vim'

Execute(expect GitDirPath fail):
  :cd /tmp/temp
  AssertEqual
    \ ticket#files#GetSessionDirPath(),
    \ expand('~') . '/.tickets/temp'
Then(go back to original dir):
  :cd -

Execute(expect ticket#files#GetSessionFilePath session pass):
  AssertEqual
    \ ticket#files#GetSessionFilePath('.vim'),
    \ expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.vim'

Execute(expect ticket#files#GetSessionFilePath session pass without leading dot):
  AssertEqual
    \ ticket#files#GetSessionFilePath('vim'),
    \ expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.vim'

Execute(expect ticket#files#GetSessionFilePath markdown pass):
  AssertEqual
    \ ticket#files#GetSessionFilePath('.md'),
    \ expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.md'

Execute(expect ticket#files#GetSessionFilePathOnlyIfExists pass):
  call ticket#sessions#CreateSession()
  AssertEqual
    \ ticket#files#GetSessionFilePathOnlyIfExists('.vim'),
    \ expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.vim'

Execute(expect ticket#files#GetSessionFilePathOnlyIfExists fail):
  AssertThrows
    \ ticket#files#GetSessionFilePathOnlyIfExists('.py')

Execute(expect ticket#sessions#CreateSession pass):
  call ticket#sessions#CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.vim')
    \ )

Execute(expect ticket#sessions#CreateSession non git based session to pass):
  :cd /tmp/temp
  call ticket#sessions#CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/temp/main.vim')
    \ )
Then(go back to original dir):
  :cd -

Execute(expect ticket#sessions#CreateSession different default session name works):
  :cd /tmp/temp2
  let g:default_session_name = 'different'
  call ticket#sessions#CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/temp2/different.vim')
    \ )
Then(go back to original dir):
  let g:default_session_name = 'main'
  :cd -

Execute(expect ticket#files#GetSessionFilePathOnlyIfExists pass when in non git repo):
  :cd /tmp/temp
  call ticket#sessions#CreateSession()
  AssertEqual
    \ ticket#files#GetSessionFilePathOnlyIfExists('.vim'),
    \ expand('~') . '/.tickets/temp/main.vim'
Then(go back to original dir):
  :cd -

Execute(expect ticket#notes#CreateNote pass):
  call ticket#notes#CreateNote()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.md')
    \ )

Execute(expect ticket#blacklist#BranchInBlackList pass):
  let branchname = substitute(system(
    \ 'git symbolic-ref --short HEAD | tr -d "\n"'
    \ ), '/', '\\%', 'g')
  let g:ticket_black_list = [branchname, 'other-branch']
  AssertEqual
    \ ticket#blacklist#BranchInBlackList(),
    \ 1

Execute(expect ticket#blacklist#BranchInBlackList fail):
  AssertEqual
    \ ticket#blacklist#BranchInBlackList(),
    \ 0

Execute(expect ticket#sessions#GetAllSessionNames to show all sessions):
  call system('touch ~/.tickets/ticket.vim/old-session.vim')
  AssertEqual
    \ ticket#sessions#GetAllSessionNames('ticket.vim'),
    \ ['old-session']

Execute(SetUp delete old sessions test):
  " NOTE: there is a bug that results in a delay when executing delete()
  " and any other operations in the same test. So we are calling the
  " DeleteOldSessions here and evalauating the results in the next test
  " as a means of circumventing said issue.
  call system('touch ~/.tickets/ticket.vim/old-session.vim')
  call ticket#deletion#DeleteOldSessions(1)

Execute(expect ticket#deletion#DeleteOldSessions remove old-session.vim):
  AssertEqual
    \ ticket#sessions#GetAllSessionNames('ticket.vim'),
    \ []

Execute(expect ticket#deletion#DeleteOldSessions to fail in a non git repo):
  :cd /tmp/temp
  AssertThrows
    \ ticket#deletion#DeleteOldSession(1)
Then(go back to original dir):
  :cd -

Execute(expect ticket#files#GetRootTicketDir to return XDG dir when set):
  let $XDG_DATA_HOME = expand('~')
  AssertEqual
    \ ticket#files#GetRootTicketDir('~/.tickets'),
    \ expand('~') . '/tickets-vim'

Execute(expect ticket#files#GetRootTicketDir to return legacy directory):
  AssertEqual
    \ ticket#files#GetRootTicketDir('~/.tickets'),
    \ expand('~/.tickets')

Execute(expect ticket#files#GetRootTicketDir to return local share directory):
  call system('mkdir -p ~/.local/share')
  AssertEqual
  \ ticket#files#GetRootTicketDir('~/.dir_does_not_exist'),
  \ expand('~/.local/share/tickets-vim')

Execute(expect ticket#auto#ShouldAutoSave should work with auto_ticket set):
  let g:auto_ticket = 1
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 1

Execute(expect ticket#auto#ShouldAutoSave should work with auto_open set):
  let g:auto_ticket_save = 1
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 1

Execute(expect ticket#auto#ShouldAutoSave should work with auto_git_only set):
  let g:auto_ticket_save = 1
  let g:auto_ticket_git_only = 1
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 1

Execute(expect ticket#auto#ShouldAutoSave should not work in current branch if black listed):
  let g:auto_ticket_save = 1
  let branchname = substitute(system(
    \ 'git symbolic-ref --short HEAD | tr -d "\n"'
    \ ), '/', '\\%', 'g')
  let g:ticket_black_list = [branchname]
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 0

Execute(expect ticket#auto#ShouldAutoSave should work if outside black listed branhces):
  let g:auto_ticket_save = 1
  let g:ticket_black_list = ['something']
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 1

Execute(expect ticket#auto#ShouldAutoSave should not work with auto_git_only set when in root dir):
  :cd /
  let g:auto_ticket_save = 1
  let g:auto_ticket_git_only = 1
  AssertEqual
    \ ticket#auto#ShouldAutoSave(),
    \ 0
Then(go back to original dir):
  :cd - 

Execute(expect ticket#auto#ShouldAutoOpen should work with auto_ticket set):
  let g:auto_ticket = 1
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 1

Execute(expect ticket#auto#ShouldAutoOpen should work with auto_open set):
  let g:auto_ticket_open = 1
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 1

Execute(expect ticket#auto#ShouldAutoOpen should work with auto_git_only set):
  let g:auto_ticket_open = 1
  let g:auto_ticket_git_only = 1
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 1

Execute(expect ticket#auto#ShouldAutoOpen should not work in current branch if black listed):
  let g:auto_ticket_open = 1
  let branchname = substitute(system(
    \ 'git symbolic-ref --short HEAD | tr -d "\n"'
    \ ), '/', '\\%', 'g')
  let g:ticket_black_list = [branchname]
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 0

Execute(expect ticket#auto#ShouldAutoOpen should work if outside black listed branhces):
  let g:auto_ticket_open = 1
  let g:ticket_black_list = ['something']
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 1

Execute(expect ticket#auto#ShouldAutoOpen should not work with auto_git_only set when in root dir):
  :cd /
  let g:auto_ticket_open = 1
  let g:auto_ticket_git_only = 1
  AssertEqual
    \ ticket#auto#ShouldAutoOpen(),
    \ 0
Then(go back to original dir):
  :cd - 

Execute(expect ticket#notes#GrepNotesFzf to error when fzf not loaded):
  let g:loaded_fzf_vim = 0
  AssertThrows
  \  ticket#notes#GrepNotesFzf('test')

Execute(expect ticket#notes#GrepNotesFzf to error when fzf not installed):
  if exists('g:loaded_fzf_vim')
    unlet g:loaded_fzf_vim
  endif
  let g:loaded_fzf_vim = 0
  AssertThrows
  \  ticket#notes#GrepNotesFzf('test')

Execute(expect IsInstalled to detect if plugin loaded):
  AssertEqual
  \  ticket#utils#IsInstalled('auto.vim'),
  \  1

Execute(expect IsInstalled to detect if plugin is not loaded):
  AssertEqual
  \  ticket#utils#IsInstalled('DOES.NOT.EXIST'),
  \  0

Execute(expect to delete current session file with DeleteCurrentAssocaitedFile):
  call ticket#sessions#CreateSession()
  call ticket#deletion#DeleteCurrentAssociatedFile('vim', 1)
  let file = expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.vim'
  AssertEqual
  \  filereadable(file),
  \  0

Execute(expect to delete current note file with DeleteCurrentAssocaitedFile):
  call ticket#notes#CreateNote()
  call ticket#deletion#DeleteCurrentAssociatedFile('md', 1)
  let file = expand('~') . '/.tickets/ticket.vim/' . ticket#git#GetBranchName() . '.md'
  AssertEqual
  \  filereadable(file),
  \  0

Execute(expect DeprecateCommand to error when executed):
  AssertThrows
  \  ticket#utils#DeprecatedCommand('old', 'new')

