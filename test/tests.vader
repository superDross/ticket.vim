Before:
  call system('touch ~/test.file')
  call system('touch ~/.tickets/ticket.vim/old-session.vim')
  call system('mkdir -p /tmp/temp')
  call system('mkdir -p /tmp/temp2')

After:
  let g:auto_ticket = 0
  let g:ticket_black_list = []
  let g:default_session_name = 'main'
  let g:session_directory = '~/.tickets'
  let $XDG_DATA_HOME = ''
  call system('rm ~/test.file')


Execute(expect GetBranchName pass):
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  AssertEqual
    \ GetBranchName(),
    \ branchname

Execute(expect g:auto_ticket to autoset to zero):
  AssertEqual
    \ g:auto_ticket,
    \ 0

Execute(expect g:ticket_black_list to autoset to empty list):
  AssertEqual
    \ g:ticket_black_list,
    \ []

Execute(expect CheckFileExists fail):
  AssertThrows
    \ CheckFileExists('/home/nonfile')

Execute(expect CheckFileExists pass):
  AssertEqual
    \ CheckFileExists(expand('~') . '/test.file'),
    \ expand('~') . '/test.file'

Execute(expect CheckIfGitRepo fail):
  :cd /
  AssertEqual
    \ CheckIfGitRepo(),
    \ 0
Then(go back to original dir):
  :cd -

Execute(expect CheckIfGitRepo pass):
  AssertEqual
    \ CheckIfGitRepo(),
    \ 1

Execute(expect GetRepoName fail):
  :cd /
  AssertThrows
    \ GetRepoName()
Then(go back to original dir):
  :cd -

Execute(expect GetRepoName pass):
  AssertEqual
    \ GetRepoName(),
    \ 'ticket.vim'

Execute(expect GitDirPath pass):
  AssertEqual
    \ GetSessionDirPath(),
    \ '~/.tickets/ticket.vim'

Execute(expect GitDirPath fail):
  :cd /tmp/temp
  AssertEqual
    \ GetSessionDirPath(),
    \ '~/.tickets/temp'
Then(go back to original dir):
  :cd -

Execute(expect GetSessionFilePath session pass):
  AssertEqual
    \ GetSessionFilePath('.vim'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.vim'

Execute(expect GetSessionFilePath markdown pass):
  AssertEqual
    \ GetSessionFilePath('.md'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.md'

Execute(expect GetSessionFilePathOnlyIfExists pass):
  call CreateSession()
  AssertEqual
    \ GetSessionFilePathOnlyIfExists('.vim'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.vim'

Execute(expect GetSessionFilePathOnlyIfExists fail):
  AssertThrows
    \ GetSessionFilePathOnlyIfExists('.py')

Execute(expect CreateSession pass):
  call CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . GetBranchName() . '.vim')
    \ )

Execute(expect CreateSession non git based session to pass):
  :cd /tmp/temp
  call CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/temp/main.vim')
    \ )
Then(go back to original dir):
  :cd -

Execute(expect CreateSession different default session name works):
  :cd /tmp/temp2
  let g:default_session_name = 'different'
  call CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/temp2/different.vim')
    \ )
Then(go back to original dir):
  let g:default_session_name = 'main'
  :cd -

Execute(expect GetSessionFilePathOnlyIfExists pass when in non git repo):
  :cd /tmp/temp
  call CreateSession()
  AssertEqual
    \ GetSessionFilePathOnlyIfExists('.vim'),
    \ '~/.tickets/temp/main.vim'
Then(go back to original dir):
  :cd -

Execute(expect CreateNote pass):
  call CreateNote()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . GetBranchName() . '.md')
    \ )

Execute(expect BranchInBlackList pass):
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  let g:ticket_black_list = [branchname, 'other-branch']
  AssertEqual
    \ BranchInBlackList(),
    \ 1

Execute(expect BranchInBlackList fail):
  AssertEqual
    \ BranchInBlackList(),
    \ 0

Execute(expect DetermineAuto pass):
  let g:auto_ticket = 1
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 1

Execute(expect DetermineAuto fail):
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 0

Execute(expect DetermineAuto fail because not in git repo):
  :cd /
  let g:auto_ticket = 1
  AssertEqual
    \ DetermineAuto(),
    \ 1
Then(go back to original dir):
  :cd - 

Execute(expect DetermineAuto fail due to black listed branch):
  let g:auto_ticket = 1
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  let g:ticket_black_list = [branchname, 'other-branch']
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 0

Execute(expect DetermineAuto to pass when session file does not exist):
  let g:auto_ticket = 1
  call system('rm ~/.tickets/ticket.vim/' . GetBranchName() . '.vim')
  AssertEqual
    \ DetermineAuto(),
    \ 1

Execute(expect GetAllSessionNames to show all sessions):
  AssertEqual
    \ GetAllSessionNames('ticket.vim'),
    \ ['old-session']

Execute(expect DeleteOldSessions remove old-session.vim):
  call DeleteOldSessions(1)
  AssertEqual
    \ GetAllSessionNames('ticket.vim'),
    \ []

Execute(expect DeleteOldSessions to fail in a non git repo):
  :cd /tmp/temp
  AssertThrows
    \ DeleteOldSession(1)
Then(go back to original dir):
  :cd -

Execute(expect GetRootTicketDir to return XDG dir when set):
  let $XDG_DATA_HOME = expand('~')
  AssertEqual
    \ GetRootTicketDir('~/.tickets'),
    \ expand('~') . '/tickets-vim'

Execute(expect GetRootTicketDir to return legacy directory):
  AssertEqual
    \ GetRootTicketDir('~/.tickets'),
    \ expand('~/.tickets')

Execute(expect GetRootTicketDir to return local share directory):
  call system('mkdir -p ~/.local/share')
  AssertEqual
  \ GetRootTicketDir('~/.dir_does_not_exist'),
  \ expand('~/.local/share/tickets-vim')
